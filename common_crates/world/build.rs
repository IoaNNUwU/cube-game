use std::env;
use std::fs;
use std::path::Path;

const CHUNK_WIDTH: usize = 32;
const CHUNK_HEIGHT: usize = 32;

fn main() {
    let empty_layer_path = Path::new(
        &env::var_os("OUT_DIR").expect("Unable to get OUT_DIR env var")
    ).join("empty_layer_macro_generated.rs");

    fs::write(empty_layer_path, format!("\
        // generated by cube-game/common_crates/world/build.rs
        macro_rules! empty_layer {{
            () => ({});
        }}", gen_empty_layer()),
    ).expect("Unable to write empty_layer_macro_generated");

    let empty_chunk_path = Path::new(
        &env::var_os("OUT_DIR").expect("Unable to get OUT_DIR env var")
    ).join("empty_chunk_macro_generated.rs");

    fs::write(empty_chunk_path, format!("\
        // generated by cube-game/common_crates/world/build.rs
        macro_rules! empty_chunk {{
            () => ({});
        }}", gen_empty_chunk()),
    ).expect("Unable to write empty_chunk_macro_generated");
    
    let empty_column_path = Path::new(
        &env::var_os("OUT_DIR").expect("Unable to get OUT_DIR env var")
    ).join("empty_column_macro_generated.rs");

    fs::write(empty_column_path, format!("\
        // generated by cube-game/common_crates/world/build.rs
        macro_rules! empty_column {{
            () => ({});
        }}", gen_empty_column()),
    ).expect("Unable to write empty_column_macro_generated");

    println!("cargo:rerun-if-changed=build.rs");
}

fn gen_empty_layer() -> String {
    let state = "BlockState::Air";
    let de = ", ";

    let mut inner_buf = String::new();

    inner_buf.push('[');
    inner_buf.push_str(state);

    for _ in 0..CHUNK_WIDTH - 1 {
        inner_buf.push_str(de);
        inner_buf.push_str(state);
    }

    inner_buf.push(']');

    let mut outer_buf = String::new();

    outer_buf.push('[');
    outer_buf.push('\n');
    outer_buf.push_str(&inner_buf);
    outer_buf.push('\n');

    for _ in 0..CHUNK_WIDTH - 1 {
        outer_buf.push_str(de);
        outer_buf.push_str(&inner_buf);
        outer_buf.push('\n');
    }

    outer_buf.push(']');

    outer_buf
}

fn gen_empty_chunk() -> String {
    let empty_layer = "ChunkLayer::EMPTY";

    let mut buf = String::new();

    let dec = ", ";

    buf.push('[');
    buf.push('\n');
    buf.push_str(empty_layer);
    buf.push('\n');

    for _ in 0..CHUNK_HEIGHT - 1 {
        buf.push_str(dec);
        buf.push_str(empty_layer);
        buf.push('\n');
    }

    buf.push(']');

    buf
}

fn gen_empty_column() -> String {

    let empty_chunk = "Chunk::EMPTY";

    let mut buf = String::new();

    let dec = ", ";

    buf.push('[');
    buf.push('\n');
    buf.push_str(empty_chunk);
    buf.push('\n');

    for _ in 0..CHUNK_HEIGHT - 1 {
        buf.push_str(dec);
        buf.push_str(empty_chunk);
        buf.push('\n');
    }

    buf.push(']');

    buf
}